{"ast":null,"code":"const isReactNative = typeof navigator > \"u\" ? !1 : navigator.product === \"ReactNative\",\n  defaultOptions = {\n    timeout: isReactNative ? 6e4 : 12e4\n  },\n  processOptions = function (opts) {\n    const options = {\n        ...defaultOptions,\n        ...(typeof opts == \"string\" ? {\n          url: opts\n        } : opts)\n      },\n      {\n        searchParams\n      } = new URL(options.url, \"http://localhost\");\n    if (options.timeout = normalizeTimeout(options.timeout), options.query) {\n      for (const [key, value] of Object.entries(options.query)) if (value !== void 0) if (Array.isArray(value)) for (const v of value) searchParams.append(key, v);else searchParams.append(key, value);\n    }\n    const [url] = options.url.split(\"?\"),\n      search = searchParams.toString();\n    return search && (options.url = `${url}?${search}`), options.method = options.body && !options.method ? \"POST\" : (options.method || \"GET\").toUpperCase(), options;\n  };\nfunction normalizeTimeout(time) {\n  if (time === !1 || time === 0) return !1;\n  if (time.connect || time.socket) return time;\n  const delay = Number(time);\n  return isNaN(delay) ? normalizeTimeout(defaultOptions.timeout) : {\n    connect: delay,\n    socket: delay\n  };\n}\nconst validUrl = /^https?:\\/\\//i,\n  validateOptions = function (options) {\n    if (!validUrl.test(options.url)) throw new Error(`\"${options.url}\" is not a valid URL`);\n  };\nexport { processOptions as p, validateOptions as v };","map":{"version":3,"names":["isReactNative","navigator","product","defaultOptions","timeout","processOptions","opts","options","url","searchParams","URL","normalizeTimeout","query","key","value","Object","entries","Array","isArray","v","append","split","search","toString","method","body","toUpperCase","time","connect","socket","delay","Number","isNaN","validUrl","validateOptions","test","Error"],"sources":["/home/sanjay/Desktop/Projects/schoolsite/node_modules/get-it/src/middleware/defaultOptionsProcessor.ts","/home/sanjay/Desktop/Projects/schoolsite/node_modules/get-it/src/middleware/defaultOptionsValidator.ts"],"sourcesContent":["import type {MiddlewareHooks, RequestOptions} from '../types'\n\nconst isReactNative = typeof navigator === 'undefined' ? false : navigator.product === 'ReactNative'\n\nconst defaultOptions = {timeout: isReactNative ? 60000 : 120000} satisfies Partial<RequestOptions>\n\n/** @public */\nexport const processOptions = function processOptions(opts) {\n  const options = {\n    ...defaultOptions,\n    ...(typeof opts === 'string' ? {url: opts} : opts),\n  } satisfies RequestOptions\n\n  // Allow parsing relative URLs by setting the origin to `http://localhost`\n  const {searchParams} = new URL(options.url, 'http://localhost')\n\n  // Normalize timeouts\n  options.timeout = normalizeTimeout(options.timeout)\n\n  // Shallow-merge (override) existing query params\n  if (options.query) {\n    for (const [key, value] of Object.entries(options.query)) {\n      if (value !== undefined) {\n        if (Array.isArray(value)) {\n          for (const v of value) {\n            searchParams.append(key, v as string)\n          }\n        } else {\n          searchParams.append(key, value as string)\n        }\n      }\n    }\n  }\n  // Merge back params into url\n  const [url] = options.url.split('?')\n  const search = searchParams.toString()\n  if (search) {\n    options.url = `${url}?${search}`\n  }\n\n  // Implicit POST if we have not specified a method but have a body\n  options.method =\n    options.body && !options.method ? 'POST' : (options.method || 'GET').toUpperCase()\n\n  return options\n} satisfies MiddlewareHooks['processOptions']\n\nfunction normalizeTimeout(time: RequestOptions['timeout']) {\n  if (time === false || time === 0) {\n    return false\n  }\n\n  if (time.connect || time.socket) {\n    return time\n  }\n\n  const delay = Number(time)\n  if (isNaN(delay)) {\n    return normalizeTimeout(defaultOptions.timeout)\n  }\n\n  return {connect: delay, socket: delay}\n}\n","import type {MiddlewareHooks} from '../types'\n\nconst validUrl = /^https?:\\/\\//i\n\n/** @public */\nexport const validateOptions = function validateOptions(options) {\n  if (!validUrl.test(options.url)) {\n    throw new Error(`\"${options.url}\" is not a valid URL`)\n  }\n} satisfies MiddlewareHooks['validateOptions']\n"],"mappings":"AAEA,MAAMA,aAAA,GAAgB,OAAOC,SAAA,GAAc,MAAc,KAAQA,SAAA,CAAUC,OAAA,KAAY;EAEjFC,cAAA,GAAiB;IAACC,OAAA,EAASJ,aAAA,GAAgB,MAAQ;EAAM;EAGlDK,cAAA,GAAiB,SAAAA,CAAwBC,IAAA,EAAM;IAC1D,MAAMC,OAAA,GAAU;QACd,GAAGJ,cAAA;QACH,IAAI,OAAOG,IAAA,IAAS,WAAW;UAACE,GAAA,EAAKF;QAAQ,IAAAA,IAAA;MAAA;MAIzC;QAACG;MAAY,IAAI,IAAIC,GAAA,CAAIH,OAAA,CAAQC,GAAA,EAAK,kBAAkB;IAM9D,IAHAD,OAAA,CAAQH,OAAA,GAAUO,gBAAA,CAAiBJ,OAAA,CAAQH,OAAO,GAG9CG,OAAA,CAAQK,KAAA;MACV,WAAW,CAACC,GAAA,EAAKC,KAAK,KAAKC,MAAA,CAAOC,OAAA,CAAQT,OAAA,CAAQK,KAAK,GACrD,IAAIE,KAAA,KAAU,QACR,IAAAG,KAAA,CAAMC,OAAA,CAAQJ,KAAK,GACrB,WAAWK,CAAA,IAAKL,KAAA,EACDL,YAAA,CAAAW,MAAA,CAAOP,GAAA,EAAKM,CAAW,OAGzBV,YAAA,CAAAW,MAAA,CAAOP,GAAA,EAAKC,KAAe;IAAA;IAM1C,OAACN,GAAG,IAAID,OAAA,CAAQC,GAAA,CAAIa,KAAA,CAAM,GAAG;MAC7BC,MAAA,GAASb,YAAA,CAAac,QAAA;IACxB,OAAAD,MAAA,KACFf,OAAA,CAAQC,GAAA,GAAM,GAAGA,GAAG,IAAIc,MAAM,KAIhCf,OAAA,CAAQiB,MAAA,GACNjB,OAAA,CAAQkB,IAAA,IAAQ,CAAClB,OAAA,CAAQiB,MAAA,GAAS,UAAUjB,OAAA,CAAQiB,MAAA,IAAU,OAAOE,WAAA,CAEhE,GAAAnB,OAAA;EACT;AAEA,SAASI,iBAAiBgB,IAAA,EAAiC;EACrD,IAAAA,IAAA,KAAS,MAASA,IAAA,KAAS,GACtB;EAGL,IAAAA,IAAA,CAAKC,OAAA,IAAWD,IAAA,CAAKE,MAAA,EAChB,OAAAF,IAAA;EAGH,MAAAG,KAAA,GAAQC,MAAA,CAAOJ,IAAI;EACrB,OAAAK,KAAA,CAAMF,KAAK,IACNnB,gBAAA,CAAiBR,cAAA,CAAeC,OAAO,IAGzC;IAACwB,OAAA,EAASE,KAAA;IAAOD,MAAA,EAAQC;EAAK;AACvC;AC5DA,MAAMG,QAAA,GAAW;EAGJC,eAAA,GAAkB,SAAAA,CAAyB3B,OAAA,EAAS;IAC/D,IAAI,CAAC0B,QAAA,CAASE,IAAA,CAAK5B,OAAA,CAAQC,GAAG,GAC5B,MAAM,IAAI4B,KAAA,CAAM,IAAI7B,OAAA,CAAQC,GAAG,sBAAsB;EAEzD"},"metadata":{},"sourceType":"module","externalDependencies":[]}